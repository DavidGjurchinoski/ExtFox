-Што е разлиĸата од ЕС6 до ЕС5 во Јавасĸрипт?

* ЕС5 - Подржува само примитивни типови на променливи: string, number, boolean, null и undefined.  
  EС6 - Ги подржува сите типови од ЕС5 и воведе нов примитивен тип symbol за подршка на уникатни вредности. 
* ЕС6 - Има подобри преформанци од ЕС5.
* ЕС6 - Ги воведе и клучните зборови let и const за декалрирање на променливи, во ЕС5 само var постоеше.
* ЕС6 - Манипулација на објекти одзема помалце време.
* ЕС6 - Воведување на Arrow Functions.
* ЕС6 - Воведување на Promises.

-Кои се основни Јавасĸрипт типови?

*string, number, boolean, null и undefined.

-Објасни ја разлиĸата со пример помеѓу “==“ и “===“?

* Со "==" проверуваме само дали вредноста е иста.
  Со "===" проверуваме дали вредноста е иста и типовите на двете променливи дали се исти.
Пример: 
	2 == "2" / true
	2 === "2" / false

-Oбјаснија разиĸата со пример помеѓу “setTimeout()” и “setInterval()”

* setTimeout() - Изврши наредба после одреден временски период.
		Примери:
			setTimeout(
 				    () => {
					    console.log("Show after 5 seconds");
					  }, 5000
				   );
  setInterval() - Извршувај ја наредбата на одреден времески период.
		Пример:
			setInterval(
					() => {
						console.log("Show this every 5 seconds");
					      }, 5000
				    );
-Oбјаснете ĸреирање од што се состои Ангулар?	

*

-Oбјаснете што Pipe и ĸога би го ĸористеле?

* PIPES се многу корисни, еднаш треба да ги декларираме и можиме да ги користиме во целата програма.
  Во ангулар имаме вградени PIPES кој ни помагаат да ги покажуваме информациите на начин кој го сакаме или да ги   трансформираме во посакуваната форма.  
  Примери за custom PIPES:
			*Search Bar PIPE
			*PIPE за враќање на default вредност(ако вредноста на променливата е FALSY врати некоја 			 предвреме одредена вредност) 
			*Element Position PIPE

-Oбјаснете што е сервис и ĸога би го ĸористеле?	

* Сервиси се класи кои содржат специфични функционалности од веб апликацијата, и лесно можиме да ги реискористуваме на секој дел од нашата веб апликација.
* Би ги користеле за да ги организираме нашите функции во една целина која врши една специфична логика во нашата апликација, кои потоа со dependency injection можиме да ги користиме во било која друга класа.	  

-Која е последна верзија на Ангулар и што е разлиĸата од
прехтодната?

* Последната верзија од ангулар е 14(но 13 е stable)
* Со верзија 13 View Engine кој ангулар го користеше е тргнат од употреба и со новиот Ivy кој е воведен уште од верзија 9 прави да биди по оптимизиран ангулар целосно за креирање на нови апликации.
* Со Ivy поедноставено е креирањето на динамички компоненти со тоа што повеќе не треба да inject ComponentFactoryResolver, сега само со инстанца од ViewContainerRef можиме да креираме нова динамична компонента.
* Извадена подршка за IE11 што значи побрзи апликации и воведување на помодерни карактеристики од browser
како што се CSS променливи и веб анимации преку native веб APIs.
* Воведување на PRESISTENT BUILD CACHE кој ќе биди новиот стандарт за проекти од верзија 13 и понови.
* Aжурирање е направено на RxJS од стандардна верзија 6.x на 7.4, и TypeScript 4.4 за сите нови проекти.
* Со новата верзија можиме да правиме поефикасни, побрзи и помали во меморија терстови со TestBed.
* Подобрување на површината на интеракција на checkbox и radio button, и подобрувања на некои високо контрастни компоненти.

-Кои се Life Cycles Hooks во ангулар и ĸога би ги употребиле истите?

* ngOnChanges - се користи кога сакаме да правиме нешто на секакви промени во нашата апликација
* ngOnInit - се користи кога сакаме да направиме нешто при првото или билдање пуштање на соодветната класа или компонента
* ngDoCheck - користиме кога сакаме да правиме проверки кои ангулар не можи да ги забележи
* ngAfterContentInit - користиме кога сакаме нешто да се направи после воведување на нови информации од надвор
* ngAfterContentChecked - се повикува кога ангулар ќе забелеши дека додаваме нови информации во компонентата
* ngAfterViewInit - се повикува кога ангулар ќе ги иницијализира ставовите компонентата и ставовите на децата од истата компонента
* ngAfterViewChecked - се повикува после проверка на ставовите на компонентата и незините деца
* ngOnDestroy - се повикува пред ангулар да ја уништи компонентата
(Lifecycle hooks користиме кога сакаме да ажурираме информации на нашата апикација при секоја различна промена)

-За што се ĸористи ngFor

* Користиме кога сакаме да изминиме некоја низа од нашиот теплате и да ги прикажиме податоците од секој елемент поединечно

-Што е разлиĸата од Div до ng-container во Ангулар

* Div е HTML елемент а ng-container го користиме за замена на div и span бидеќи е non-rendered



























  